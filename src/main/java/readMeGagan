1. In order to intercept request sent and response receive by invoking rest template , we have defined an interceptor
MovieCatalogueInterceptor which implements ClientHttpRequestInterceptor.

ClientHttpRequestInterceptor interface is a functional interface with only one method 
public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)

Here we have logged request details like request method , request body , response hedaers etc.

Most Imp-> After creating a interceptor , we need to instantiate it and tag it to restTemplate whose request/response it will intercept
by invoking restTempalte.setInterceptor(List<ClientHttpRequestInterceptor> )

here in our code
r.setInterceptors(Arrays.asList(new MovieCatalogueInterceptor()));

2.
 Map<String, String> m = Stream.of("user").collect(Collectors.toMap(a -> a, a
		// -> "gagan"));
Above will create Map with entry(key=user, value=gagan)

3.Multiple request headers, query/request param can be sent through restTemplate as MutiValueMap. MultiValueMap is an interface
whose implementation class is LinkedMultiValueMap.

The headers can be provided as HttpEntity(T body, MultiValueMap<String,String> headers)
and then RestTemplate method
<T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType, Map<String,?> uriVariables)

Similarly queryParam/requestParam can be passed as MultiValueMap to URI

MultiValueMap<String, String> multiValueMap = new LinkedMultiValueMap<>();
		multiValueMap.add("user", userName);
		String url = UriComponentsBuilder.fromHttpUrl(ratingDataServiceURL).queryParams(multiValueMap).toUriString()
		
		This url will have query string i.e ww.abc.com?k1=v1&k2=v2...
		where k1,v1 ; k2,v2 .. are entries in MultiValueMap supplied to URIComponentBuilder
		
This url as string can be passed to any method of resttemplate

4.In 
https://www.baeldung.com/spring-rest-template-list
<T> ResponseEntity<T>	exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType, Map<String,?> uriVariables)

The response object is encapsulated by Class<T> responseType but lets suppose here it is Collection<GenericType>
lets say List<MovieRating> then you will have to instantiate annonymous inner class as
new ParameterizedTypeReference<List<MovieRating>>() {
				} 
i.e new ParameterizedTypeReference<T>() {
				} 
where T is Collection<Q>

and hence go as
ResponseEntity<List<Employee>> response = restTemplate.exchange(
  "http://localhost:8080/employees/",
  HttpMethod.GET,
  null,
  new ParameterizedTypeReference<List<Employee>>(){});				

 5. Spring boot comes with a client already in classpath-RestTemplate
 
 6.
 For using WebClient as RestTemplate will be deprecated we need to add dependency 
 
 <dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-webflux</artifactId>
</dependency>
		
and then WebClient webClient=WebClient.create()
 
 Spring WebFlux is a fully non-blocking reactive alternative to Spring MVC.
 List<A>,Collection<A>,Set<A> etc--> Flux<A>
 Single Value -> Mono
 https://stackoverflow.com/questions/56029123/spring-webclient-customised-response-callback-on-http-error-status
 https://dzone.com/articles/doing-stuff-with-spring-webflux
 https://www.e4developer.com/2018/05/31/webflux-in-practice-asynchronous-service-with-webclient/
 
 7.Why hardcoded URLs are bad?
 Dynamic URLs in cloud
 Multiple environments, multiple url
 Multiple instances with different urls while loadbalancing
 
 8. Types of service Discovery:
 Client Side Service Discovery-> Disc Server returns address/URL of service asked by client
 and then client directly hits that service by invoking the provided URL/address.
 
 Server Side Service Discovery-> Disc. Server acts as intermediate b/w service and client 
 and routes requests from client to service. This is efficient as less hops.
 Spring cloud uses client side service discovery
 
 9. Steps of Service Discovery through Netflix provided Eureka technology
a)Start up Eureka Server
b)Have microservices register(publish) using Eureka client
c)Have microservices locate(consume) using Eureka client

Thereafter read 10 readMeGagan from Microservices_EurekaServer project

13. Consuming services with eureka client name
You can now call the service by just providing the eureka client name and
not give complete URL as we have url as defined in application.proprties file i.e
ratingDataServiceEurekaClientNamedUrl=http://MOVIE-RATING-DATA-SERVICE/rating
movieInfoServiceEurekaClientNamedUrl=http://MOVIE-INFO-SERVICE/movies/info

The RestTemplate bean by which we are invoking these services should be annotated
with @LoadBalanced
@LoadBalanced=ServiceDiscovery+Load Balancing(at client side)

The restTemplate will take care of finding service url. It will provide abstraction
while invoking service by first calling eureka server to get service url of service
and then invoking the service through obtained service url.You don't have to do anything.

It does load balancing at client side in the sense once Eureka server returns that there are n 
instances for this service(service id) , the it automatically chooses one instance based on some
load balancing logic and then hits that instance.

14.Eureka client sends heart beats to service registry/eureka server periodically 
to register its presence

15.How to fetch all services name at runtime?How to customize load balancing(other than @LoadBalanced)?
DiscoveryClient https://spring.io/guides/gs/service-registration-and-discovery/

Discovery client is an interface 

In above spring documentation link , com.netflix.discovery.DiscoveryClient of netflix 
library is used to fetch all services at runtime but this is not working practically 
as we are getting no such bean  exception on Autowiring it (not even lazy autowiring 
is working) 

The alternate to it is using org.springframework.cloud.client.discovery.DiscoveryClient
from spring cloud and getting its instance by autowiring it.

Now you get all services name at runtime by invoking 
List<String> discoveryClient.getServices() 
eg will give [MOVIE-CATALOGUE-SERVICE,MOVIE-INFO-SERVICE,MOVIE-RATING-DATA-SERVICE]

You can get url of all instances of a given service by calling
List<ServiceInstance> discoveryClient.getInstances("MOVIE-INFO-SERVICE")

And  then  extract url by serviceInstance.getUri();
will return http://HarinderBudhiraja:9999

discoveryClient_springCloud.getInstances("MOVIE-INFO-SERVICE").forEach(serviceInstance -> {
			System.out.println(serviceInstance.getUri().toString());
		});

Using above approach you can chose which instance you wish to invoke and customize load balancing

16. We can spawn multiple instances of a service by doing

a)Create jar file by executing
mvn install 
b)Run this jar on specified port (i.e override port as defined in application.properties file)
java  -Dserver.port=9999 -jar movie-info-0.0.1-SNAPSHOT.jar

-Dxxx=xValue is used to provide property in java. It is for any property.

These multiple instances on getting spawned on distinct ports will be displayed on Eureka server
UI at loaclhost:8761

17. Function.identity() is just a shortcut for defining a function that accepts 
and returns the same value. We have used in stream api.

18. In case Eureka server goes down, eureka client can get the service url from its cache

19.If the microservices to be called are slow, you can set timeout by customizing
timeout by using following parameterized constructor of RestTemplate 
RestTemplate(ClientHttpRequestFactory requestFactory)

ClientHttpRequestFactory is a functional interface whose implementation class is 
HttpComponentsClientHttpRequestFactory

You can instantiate HttpComponentsClientHttpRequestFactory and use its method 
void setConnectTimeout(int timeout)

and set timeout is in milliseconds. A timeout value of 0 specifies an infinite timeout.

20.Circuit breaker parameters:
When does a circuit trp?
a)Last n request to consider for this decision
b)How many above requests should fail to trigger circuit break?
c)What is definition of failure?
Timeout duration.Mark it as failure after elapse of timeout duration.

When does the circuit un-trip?
How long after a circuit trip to try again?(Sleep window)

21. What to do when a circuit breaks? 
Define a fallback which does one of three
a) Throw an error (Rarely do this )
b) Return a fallback "default" response to be acted upon (Can do this)
c) Save previous response in cache and return it from cache (The best option)

22. Why circuit breakers?
a) Failing Fast
b) Fallback functionality
c) Automatic recovery (after sleep window hit again to check if its working fine now)

23. Circuit breaker pattern
a)When to break circuit? (Circuit breaker parameters)
b)What to do when circuit breaks? (Fallback)
c)When to resume request? (Sleep window)

24. Audience Questions (Vid 14)
If we implement a default fallback response,will the client need to know and distinguish it
from "normal" response?

Ideally client should not be aware its fallback response.

What if the cached response coming from circuit breaker is outdated?
Caching not recommended in mission critical applications like banking application but good
as for facebook feeds. Sensible response which may be incorrect is better than no response.

25)What is Hystrix?
Open source library originally created by Netflix which
implements  circuit breaker pattern 
and accepts configuration parameters and provides fault tolerance and resilience
and integerates well with spring boot/

There are other fault tolerance patterns like adaptive fault tolerance

26)Adding Hystrix to Spring Boot microservice

a)Add following dependency to pom.xml
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
b)Add @EnableCircuitBreaker to Spring Boot main class
c)Use @HystrixCommand(fallbackMethod = "getFallbackMovieCatalogue")
annotation over method in which call to service is made and hence is bound to timeout or give
error i.e to methods which need circuit breakers.

The fallbackMethod entry of the annotation must be supplied name of the fallback method which
will be executed in case of timeout/other failures.

The fallback method must have same signature as the method over which @HystrixCommand is
annotated.Further it should be in the same class.
d)Configure Hystrix behavior

27) How does Hystrix work?
 Hystrix wraps the API class over proxy class .On call to
 API class instance,instance of proxy class returned and inside this proxy class
 (which extends the class) we have defined circuit breaker code that in case of any error invoke fallback method.
 
 It is due to above implementation of hystrix wherein it involves proxy class , that 
 
 1) Fall back method doesn't work if:
 public MovieCatalogue getMovieCatalogueGranular(String userName) {
		MovieCatalogue mC = new MovieCatalogue();
		mC.setUserName(userName);
		List<MovieRating> movieRating =  getMovieRating(userName);
		List<javabrains.io.movieCatalogue.model.Movie> movies = movieRating.stream().map(rating -> {
			Movie m = getMovieInfo(rating.getMovieId());
			return new javabrains.io.movieCatalogue.model.Movie(rating.getMovieId(), m.getMovieName(),
					rating.getRating(), m.getMovieDescription());
		}).collect(Collectors.toList());
		mC.setMovies(movies);
		return mC;
	}
i.e the  methods wherein API calls are being made and the method which invokes this method are in same class

2) Fall back method will work if 
public MovieCatalogue getMovieCatalogueGranular(String userName) {
		MovieCatalogue mC = new MovieCatalogue();
		mC.setUserName(userName);
		List<MovieRating> movieRating =  movieRatingUtil.getMovieRating(userName);
		List<javabrains.io.movieCatalogue.model.Movie> movies = movieRating.stream().map(rating -> {
			Movie m = movieInfoUtil.getMovieInfo(rating.getMovieId());
			return new javabrains.io.movieCatalogue.model.Movie(rating.getMovieId(), m.getMovieName(),
					rating.getRating(), m.getMovieDescription());
		}).collect(Collectors.toList());
		mC.setMovies(movies);
		return mC;
	}

	The methods from where API calls are made and the method which invokes those method are in different classes
	
In brief for hystrix to work 
(method in which we invoke service + fall back method) have to be in same class
consumer method of service & ( (method in which we invoke service + fall back method) have to be in different class.

28)https://github.com/Netflix/Hystrix/wiki/Configuration
@HystrixCommand(fallbackMethod = "getMovieInfoFallback",commandProperties={@HystrixProperty(name="execution.isolation.thread.timeoutInMilliseconds",value="2000"),
			@HystrixProperty(name="circuitBreaker.requestVolumeThreshold",value="6"),
			@HystrixProperty(name="circuitBreaker.errorThresholdPercentage",value="50"),
			@HystrixProperty(name="circuitBreaker.sleepWindowInMilliseconds",value="8000")
	})
	
As discussed in point 20
.Circuit breaker parameters:
When does a circuit trp?
a)Last n request to consider for this decision - circuitBreaker.requestVolumeThreshold
b)How many above requests should fail to trigger circuit break? - circuitBreaker.errorThresholdPercentage
c)What is definition of failure? - execution.isolation.thread.timeoutInMilliseconds
Timeout duration.Mark it as failure after elapse of timeout duration.

When does the circuit un-trip?
How long after a circuit trip to try again?(Sleep window) - circuitBreaker.sleepWindowInMilliseconds

https://howtodoinjava.com/spring-cloud/pivotal-cloud-foundry-spring-boot-example/

29) Hystrix dashboard 
Hystrix dashboard is visualization UI which provides hystrix metrices for every circuit in real time like request rate, circuit breaker 
status, error %of last 10 seconds,no of hosts reporting from cluster,color coded count of requests falling under following categories:
fail, timeout, rejected, bad request, short circuited , success
 
We can configure Hystrix dashboard for each application independently or aggregate the hystrix event stream of multiple
applications into a single external application(called turbine stream aggregator) using turbine.
The former will be monitoring single host while latter will monitor cluster.
 
To configure hystrix dashboard for each application independently 
a)Add following dependencies in application's pom.xml:

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
</dependency>
		
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

b) Add @EnableHystrixDashboard over sprint boot main class

c)Add following property in application.properties file
management.endpoints.web.exposure.include=hystrix.stream
Above property exposes endpoint at actuator/hystrix.stream endpoint where you will get hystrix stream

Now open localhost:port/hystrix
In the textfield enter localhost:port/actuator/hystrix.stream and click Monitor stream

on localhost:port/actuator/hystrix.stream edpoint you will get live streaming of hystrix stream.
The hystrix uses actuator to aggregate health statistics of applications through endpoints exposed by actuator. 

The process to set up turbine stream aggregator has been explained in readMeGagan.txt file of  Microservices_HystrixStreamTurbineAggregator
app.

30)Distributed Log Tracing
To enable sleuth for distributed log tracing add following dependency 
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-sleuth</artifactId>
</dependency>

This will automatically enable sleuth and in logs [appName,traceId,spanId,export] will be printed as 
-03-20 10:15:38.466  INFO [inventory-service,683f8e4370413032,d8abe400c68a9a6b,false] 53685 --- [oryController-3] ...
Sleuth includes the pattern [appname,traceId,spanId,exportable] in logs from the MDC.

We have added sleuth dependency in all three applications namely calaogue,movie-info & movie-rating.

When call goes to movieCatalogue/userName , it internally calls movieInfo and movieRating. 
Due to sleuth dependency, the movieCatalogue automatically intercepts the requests and sends traceId and spanId as headers to
downstream services i.e movieInfo and movieRating. This traceId is constant over call to downstream services and this gets printed in log
statements and hence can be used to analyse logs on Splunk

See below the traceId,spanId,parentSpanId sent as request headers
2019-11-03 21:41:03.176  INFO [movie-catalogue-service,a60278740d94a7d6,492da525db99532c,false] 5304 --- [MovieInfoUtil-1] j.i.m.i.MovieCatalogueInterceptor        : Request Headers[Accept:"application/json, application/*+json", Content-Length:"0", X-B3-TraceId:"a60278740d94a7d6", X-B3-SpanId:"492da525db99532c", X-B3-ParentSpanId:"a964db85f8bbe984", X-B3-Sampled:"0"]

traceId-> tracking across microservices
spanId-> tracking within microservice

https://dzone.com/articles/microservices-part-6-distributed-tracing-with-spri
https://www.baeldung.com/spring-cloud-sleuth-single-application


Application name – This is the name we set in the properties file and can be used to aggregate logs from multiple instances of the same application.
TraceId – This is an id that is assigned to a single request, job, or action. Something like each unique user initiated web request will have its own traceId.
SpanId – Tracks a unit of work. Think of a request that consists of multiple steps. 
Each step could have its own spanId and be tracked individually. 
By default, any application flow will start with same TraceId and SpanId.
Above can be validated as below log statement in which traceId=spanId

2019-11-03 21:41:02.140  INFO [movie-catalogue-service,a60278740d94a7d6,a60278740d94a7d6,false] 5304 --- [nio-9092-exec-5] j.i.m.c.MovieCatalogueController         : Delegating request to Service class
Export – This property is a boolean that indicates whether or not this log was exported to an aggregator like Zipkin.

RID(request id) and SID(session id) in company such that SID is subset of RID
Similarly SpanId is subset of TraceId.
A single trace can be composed of multiple spans each correlating to a specific step or section of the request. 
Traces can be thought of like a single request or job that is triggered in an application